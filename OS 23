#include <stdio.h>
#define MAX_MEMORY 1000

int memory[MAX_MEMORY];

void initializeMemory() {
    for (int i = 0; i < MAX_MEMORY; i++)
        memory[i] = -1; // -1 indicates free block
}

void displayMemory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MAX_MEMORY;) {
        if (memory[i] == -1) {
            int start = i;
            while (i < MAX_MEMORY && memory[i] == -1)
                i++;
            printf("Free block %d–%d\n", start, i - 1);
        } else {
            i++;
        }
    }
}

void allocateMemory(int processId, int size) {
    for (int i = 0; i < MAX_MEMORY;) {
        if (memory[i] == -1) {
            int start = i;
            int count = 0;
            while (i < MAX_MEMORY && memory[i] == -1) {
                count++;
                i++;
            }
            if (count >= size) {
                for (int j = start; j < start + size; j++)
                    memory[j] = processId;
                printf("Allocated block %d–%d to Process %d\n", start, start + size - 1, processId);
                return;
            }
        } else {
            i++;
        }
    }
    printf("Allocation failed for Process %d\n", processId);
}

void deallocateMemory(int processId) {
    for (int i = 0; i < MAX_MEMORY; i++) {
        if (memory[i] == processId)
            memory[i] = -1;
    }
    printf("Memory released by Process %d\n", processId);
}

int main() {
    initializeMemory();
    displayMemory();

    allocateMemory(1, 200);
    displayMemory();

    allocateMemory(2, 300);
    displayMemory();

    deallocateMemory(1);
    displayMemory();

    allocateMemory(3, 400);
    displayMemory();

    return 0;
}
