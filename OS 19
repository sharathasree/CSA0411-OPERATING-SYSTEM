#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
int counter = 0;
pthread_mutex_t lock;
void* thread_function(void* arg) {
    int i;
    for (i = 0; i < 5; i++) {
        pthread_mutex_lock(&lock);
        int temp = counter;
        printf("Thread %ld: Counter = %d\n", (long)pthread_self(), temp + 1);
        counter = temp + 1;
        pthread_mutex_unlock(&lock);
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;
    if (pthread_mutex_init(&lock, NULL) != 0) {
        printf("Mutex init failed\n");
        return 1;
    }
    pthread_create(&t1, NULL, thread_function, NULL);
    pthread_create(&t2, NULL, thread_function, NULL);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    printf("Final Counter Value: %d\n", counter);
    pthread_mutex_destroy(&lock);

    return 0;
}
